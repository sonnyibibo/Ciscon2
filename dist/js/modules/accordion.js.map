{"version":3,"file":"accordion.js","names":["Accordion","selector","options","arguments","length","undefined","_classCallCheck","defaults","itemSelector","headerSelector","buttonSelector","contentSelector","activeClass","collapsedClass","singleOpen","onToggle","_objectSpread","accordion","document","querySelector","items","querySelectorAll","handleClick","bind","init","_createClass","key","value","_this","forEach","button","addEventListener","e","currentTarget","isExpanded","getAttribute","targetId","concat","closest","id","target","closeAll","toggleItem","content","open","classList","remove","setAttribute","add","style","display","exceptContent","_this2","item","openItem","index","refresh","_this3","removeEventListener","destroy","_this4"],"sources":["accordion.js"],"sourcesContent":["/**\n * Accordion Module\n * Handles the functionality for accordion/collapsible elements\n */\n\nclass Accordion {\n    /**\n     * Constructor\n     * @param {string} selector - The accordion container selector\n     * @param {Object} options - The options for the accordion\n     */\n    constructor(selector, options = {}) {\n        // Default options\n        this.defaults = {\n            itemSelector: '.accordion-item',\n            headerSelector: '.accordion-header',\n            buttonSelector: '.accordion-button',\n            contentSelector: '.accordion-collapse',\n            activeClass: 'show',\n            collapsedClass: 'collapsed',\n            singleOpen: true, // Whether only one item can be open at a time\n            onToggle: null // Callback function when an item is toggled\n        };\n\n        // Merge options with defaults\n        this.options = { ...this.defaults, ...options };\n\n        // Find accordion element\n        this.accordion = document.querySelector(selector);\n\n        // If accordion doesn't exist, exit\n        if (!this.accordion) return;\n\n        // Find accordion items\n        this.items = this.accordion.querySelectorAll(this.options.itemSelector);\n\n        // Exit if no items\n        if (!this.items.length) return;\n\n        // Bind methods\n        this.handleClick = this.handleClick.bind(this);\n\n        // Initialize\n        this.init();\n    }\n\n    /**\n     * Initialize the accordion\n     */\n    init() {\n        // Add click event listeners to all buttons\n        this.accordion.querySelectorAll(this.options.buttonSelector).forEach(button => {\n            button.addEventListener('click', this.handleClick);\n        });\n    }\n\n    /**\n     * Handle button click\n     * @param {Event} e - The click event\n     */\n    handleClick(e) {\n        const button = e.currentTarget;\n        const isExpanded = button.getAttribute('aria-expanded') === 'true';\n\n        // Find the target content\n        const targetId = button.getAttribute('data-bs-target') ||\n            button.getAttribute('href') ||\n            `#${button.closest(this.options.headerSelector).id}-collapse`;\n\n        const target = document.querySelector(targetId);\n\n        if (!target) return;\n\n        // If single open mode is enabled, close all other items\n        if (this.options.singleOpen && !isExpanded) {\n            this.closeAll(target);\n        }\n\n        // Toggle the clicked accordion item\n        this.toggleItem(button, target, !isExpanded);\n\n        // Call onToggle callback if provided\n        if (typeof this.options.onToggle === 'function') {\n            this.options.onToggle(button, target, !isExpanded);\n        }\n    }\n\n    /**\n     * Toggle an accordion item\n     * @param {HTMLElement} button - The button element\n     * @param {HTMLElement} content - The content element\n     * @param {boolean} open - Whether to open or close the item\n     */\n    toggleItem(button, content, open) {\n        if (open) {\n            // Open the item\n            button.classList.remove(this.options.collapsedClass);\n            button.setAttribute('aria-expanded', 'true');\n            content.classList.add(this.options.activeClass);\n\n            // Set explicit display for browsers without CSS transition support\n            content.style.display = 'block';\n        } else {\n            // Close the item\n            button.classList.add(this.options.collapsedClass);\n            button.setAttribute('aria-expanded', 'false');\n            content.classList.remove(this.options.activeClass);\n\n            // Set explicit display for browsers without CSS transition support\n            content.style.display = 'none';\n        }\n    }\n\n    /**\n     * Close all accordion items except the specified one\n     * @param {HTMLElement} exceptContent - The content element to exclude\n     */\n    closeAll(exceptContent) {\n        this.items.forEach(item => {\n            const button = item.querySelector(this.options.buttonSelector);\n            const content = item.querySelector(this.options.contentSelector);\n\n            if (content && content !== exceptContent) {\n                this.toggleItem(button, content, false);\n            }\n        });\n    }\n\n    /**\n     * Open a specific accordion item by index\n     * @param {number} index - The index of the item to open\n     */\n    openItem(index) {\n        if (index < 0 || index >= this.items.length) return;\n\n        const item = this.items[index];\n        const button = item.querySelector(this.options.buttonSelector);\n        const content = item.querySelector(this.options.contentSelector);\n\n        if (button && content) {\n            // Close other items if single open mode is enabled\n            if (this.options.singleOpen) {\n                this.closeAll(content);\n            }\n\n            // Open the specified item\n            this.toggleItem(button, content, true);\n        }\n    }\n\n    /**\n     * Refresh the accordion (useful after dynamic content changes)\n     */\n    refresh() {\n        // Remove existing event listeners\n        this.accordion.querySelectorAll(this.options.buttonSelector).forEach(button => {\n            button.removeEventListener('click', this.handleClick);\n        });\n\n        // Find accordion items again (in case they changed)\n        this.items = this.accordion.querySelectorAll(this.options.itemSelector);\n\n        // Reinitialize\n        this.init();\n    }\n\n    /**\n     * Destroy the accordion (remove event listeners)\n     */\n    destroy() {\n        this.accordion.querySelectorAll(this.options.buttonSelector).forEach(button => {\n            button.removeEventListener('click', this.handleClick);\n        });\n    }\n}\n\nexport default Accordion;"],"mappings":"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","ignoreList":[]}